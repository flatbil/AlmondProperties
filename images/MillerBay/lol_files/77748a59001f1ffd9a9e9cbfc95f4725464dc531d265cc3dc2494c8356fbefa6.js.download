!function(i){var n={};function a(t){if(n[t])return n[t].exports;var e=n[t]={i:t,l:!1,exports:{}};return i[t].call(e.exports,e,e.exports,a),e.l=!0,e.exports}a.m=i,a.c=n,a.d=function(t,e,i){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(a.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)a.d(i,n,function(t){return e[t]}.bind(null,n));return i},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=48)}([function(t,e){t.exports=Roblox},function(t,e,i){"use strict";var n=i(0),a=i(2),o=i.n(a).a.module("notificationStream",["robloxApp","ui.bootstrap","notificationStreamHtmlTemplate","thumbnails"]).config(["languageResourceProvider",function(t){var e=(new n.TranslationResourceProvider).getTranslationResource("Notifications.NotificationStream");t.setTranslationResources([e])}]);e.a=o},function(t,e){t.exports=angular},function(t,e){function o(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}function r(t){return t.split("/").pop().replace(".html","")}var i={importFilesUnderPath:function(t){t.keys().forEach(t)},templateCacheGenerator:function(t,e,n,a){return t.module(e,[]).run(["$templateCache",function(i){n&&n.keys().forEach(function(t){var e=o(r(t));i.put(e,n(t))}),a&&a.keys().forEach(function(t){var e=o(r(t));i.put(e,function(t){return t.replace(/<\/?script[^>]*>/gi,"")}(a(t)))})}])}};t.exports=i},function(t,e,i){"use strict";var n=i(2),a=i.n(n).a.module("notificationStreamIcon",["robloxApp","notificationStream","notificationStreamIconHtmlTemplate"]);e.a=a},function(t,e,i){var n={"./gameUpdatesConstants.js":6,"./signalR.js":7};function a(t){var e=o(t);return i(e)}function o(t){if(i.o(n,t))return n[t];var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}a.keys=function(){return Object.keys(n)},a.resolve=o,(t.exports=a).id=5},function(t,e,i){"use strict";i.r(e);var n=i(0),a={endpoints:{getInteractedEndpoint:function(){return{url:n.EnvironmentUrls.notificationApi+"/v2/stream-notifications/game-update-notification-interacted",retryable:!1,withCredentials:!0}},getReadEndpoint:function(){return{url:n.EnvironmentUrls.notificationApi+"/v2/stream-notifications/game-update-notification-read",retryable:!1,withCredentials:!0}},getGameFollowingsEndpoint:function(t){return{url:n.EnvironmentUrls.followingsApi+"/v1/users/"+t+"/universes",retryable:!0,withCredentials:!0}},getFollowGameEndpoint:function(t,e){return{url:n.EnvironmentUrls.followingsApi+"/v1/users/"+t+"/universes/"+e,retryable:!1,withCredentials:!0}},getGameDetailsEndpoint:function(){return{url:n.EnvironmentUrls.gamesApi+"/v1/games/multiget-place-details",retryable:!0,withCredentials:!0}},getGameIconsEndpoint:function(){return{url:n.EnvironmentUrls.thumbnailsApi+"/v1/games/icons",retryable:!0,withCredentials:!0}},getGameIconsLegacyEndpoint:function(){return{url:n.EnvironmentUrls.gamesApi+"/v1/games/game-thumbnails",retryable:!0,withCredentials:!0}},getGameUpdatesEndpoint:function(){return{url:n.EnvironmentUrls.notificationApi+"/v2/stream-notifications/get-latest-game-updates",retryable:!0,withCredentials:!0}},getAbuseReportUrl:function(t,e,i){return n.EnvironmentUrls.websiteUrl+"/abusereport/gameupdate?id="+t+"&redirectUrl="+i}},apiParams:{gameUpdateBatchSize:100,placeDetailBatchSize:100,gameIconBatchSize:100,gameIconSize:"150x150",gameIconFormat:"png",gameIconWidth:150,gameIconHeight:150},gameNameMaxLength:30,gameUpdateInteractions:{played:"Played",seen:"Seen",unfollowed:"Unfollowed"}};i(1).a.constant("gameUpdatesConstants",a),e.default=a},function(t,e,i){"use strict";i.r(e);var n={notifications:{NotificationStream:"NotificationStream",ChatPrivacySettingNotifications:"ChatPrivacySettingNotifications"},types:{NewNotification:"NewNotification",NotificationsRead:"NotificationsRead",NotificationMarkedInteracted:"NotificationMarkedInteracted",NotificationRevoked:"NotificationRevoked",chatEnabled:"ChatEnabled",chatDisabled:"ChatDisabled"}};i(1).a.constant("signalR",n),e.default=n},function(t,e,i){var n={"./sortGameUpdatesFilter.js":9,"./sortNotificationsByEventDateDesc.js":10};function a(t){var e=o(t);return i(e)}function o(t){if(i.o(n,t))return n[t];var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}a.keys=function(){return Object.keys(n)},a.resolve=o,(t.exports=a).id=8},function(t,e,i){"use strict";i.r(e);var n=i(1);function a(e){return function(t){return e.sortGameUpdatesByCreatedDate(t,!1)}}a.$inject=["gameUpdatesUtility"],n.a.filter("sortGameUpdates",a),e.default=a},function(t,e,i){"use strict";i.r(e);var n=i(1);function a(e){return function(t){return e.sortNotificationsByEventDate(t,!1)}}a.$inject=["notificationStreamUtility"],n.a.filter("sortNotificationsByEventDateDesc",a),e.default=a},function(t,e,i){var n={"./clickInCardDirective.js":12,"./developerMetricsAvailableDirective.js":13,"./friendRequestDirective.js":14,"./gameUpdateDirective.js":15,"./lazyLoadingDirective.js":16,"./notificationCardDirective.js":17,"./notificationContentDirective.js":18,"./notificationContentViewDirective.js":19,"./notificationStreamBaseDirective.js":20,"./notificationStreamBaseViewDirective.js":21,"./notificationStreamBodyDirective.js":22,"./notificationStreamContainerDirective.js":23,"./privateMessageDirective.js":24,"./testDirective.js":25};function a(t){var e=o(t);return i(e)}function o(t){if(i.o(n,t))return n[t];var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}a.keys=function(){return Object.keys(n)},a.resolve=o,(t.exports=a).id=11},function(t,e,i){"use strict";i.r(e);var n=i(2),u=i.n(n),a=i(1);function o(s,l,d,f){return{restrict:"A",scope:!0,link:function(c,t,e){t.bind("click",function(t){if(!t.target)return!1;var e=u.a.element(t.target),i=e.attr("type");if(t.target&&i){var n=u.a.copy(c.library.eventStreamMetaData);c.notification&&(n.notificationType=c.notification.notificationSourceType,c.interactNotification(c.notification));var a=s.eventNames.notificationStream[i];if(s.sendEventWithTarget(a,t.type,n),c.library.inApp){switch(t.stopPropagation(),t.preventDefault(),i){case d.links.settingLinkName:var o={feature:d.links.settingTabName,urlPath:d.links.settingLink};l.navigateToFeature(o,function(t){f.debug("navigateToFeature ---- status:"+t)});break;case d.links.friendRequestLinkName:o={feature:d.links.friendRequestTabName,urlPath:d.links.friendRequestLink};l.navigateToFeature(o,function(t){f.debug("openUserProfile ---- status:"+t)});break;case d.links.profileLinkName:var r;r=e.attr("href")&&e.attr("href").match(/users\/(\d+)/,"")?e.attr("href").match(/users\/(\d+)/,"")[1]:c.userIds[0],l.openUserProfile(parseInt(r),function(t){f.debug("openUserProfile ---- status:"+t)})}return!1}}})}}}o.$inject=["eventStreamService","hybridService","notificationStreamUtility","$log"],a.a.directive("clickInCard",o),e.default=o},function(t,e,i){"use strict";i.r(e);var s=i(0),n=i(1);function a(a,o,r,c,t){return{restrict:"A",replace:!0,scope:{notification:"=",appMeta:"=",library:"=",interactNotification:"&"},templateUrl:r.templates.developerMetricsAvailableTemplate,link:function(n,t,e){!function(){n.notificationSourceType=r.notificationSourceType,n.developerMetricsAvailableLayout={month:"",year:"",universeId:-1,gameName:"",gameNameLinked:"",rootPlaceId:-1,gameLinkUrl:null,gameIconUrl:null};var t=n.notification.metadataCollection;if(t&&0<t.length){var e=t[0],i=c.getAbsoluteUrl("/places/"+e.rootPlaceId+"/stats");n.developerMetricsAvailableLayout.month=function(t){for(var e=(new s.Intl).getMonthsList("long"),i=0,n=e.length;i<n;i++)if(e[i].value===t)return e[i].name;return""}(e.month),n.developerMetricsAvailableLayout.year=e.year,n.developerMetricsAvailableLayout.universeId=e.universeId,n.developerMetricsAvailableLayout.gameName=e.gameName,n.developerMetricsAvailableLayout.gameNameLinked='<a class="text-name font-caption-header" href="'+i+'">'+e.gameName+"</a>",n.developerMetricsAvailableLayout.rootPlaceId=e.rootPlaceId,n.developerMetricsAvailableLayout.gameLinkUrl=i,o.multiGetGameIconsAsync([e.universeId]).then(function(t){t&&t.hasOwnProperty(e.universeId)&&(n.developerMetricsAvailableLayout.gameIconUrl=t[e.universeId])}),n.viewButtonHandler=function(){a.location.href=n.developerMetricsAvailableLayout.gameLinkUrl}}}()}}}a.$inject=["$window","gameUpdatesService","notificationStreamUtility","urlService","$log"],n.a.directive("developerMetricsAvailable",a),e.default=a},function(t,e,i){"use strict";i.r(e);var n=i(1);function a(m,t,a){return{restrict:"A",replace:!0,scope:{notification:"=",library:"=",appMeta:"=",acceptFriend:"&",ignoreFriend:"&",chat:"&",interactNotification:"&"},templateUrl:m.templates.friendRequestTemplate,link:function(l,t,e){l.notificationSourceType=m.notificationSourceType,l.friendRequestLink=m.layout.friendRequestLink;var i=l.notification.metadataCollection,d=l.notification.notificationSourceType,n=i.length,f=l.notification.eventCount?l.notification.eventCount:n,u="",p="";!function(){if(l.userIds=[],l.notificationDisplayText="",i.forEach(function(t,e){var i=m.normalizeUser(d,t),n=i.userId,a=i.userName,o=i.displayName,r=l.library.userLibrary[n]&&l.library.userLibrary[n].profileLink?l.library.userLibrary[n].profileLink:m.getAbsoluteUrl(m.links.profileLink,{id:n});l.userIds.indexOf(n)<0&&l.userIds.push(n);var c=m.getUserHtmlTemplate(d,f),s=m.getFormatString(c,{userId:n,userName:a,displayName:o,profileLink:r});e<1?(s,u+=s):e<2&&(p+=s,2<f?", "+s+", ":2===f&&" and "+s)}),0===n)l.notificationDisplayText=m.normalizeYouHaveText(d,f);else if(2<f||n<f){var t=2<n?f-2:f-n;l.notificationDisplayText=m.normalizeMultipleDisplayText(d,u,p,t),l.requestConfirmedText=m.normalizeMultipleConfirmedText(d,u,p,t)}else 2===f?(l.notificationDisplayText=m.normalizeDoubleDisplayText(d,u,p),l.requestConfirmedText=m.normalizeDoubleConfirmedText(d,u,p)):(l.notificationDisplayText=m.normalizeSingleDisplayText(d,u),l.requestConfirmedText=m.normalizeSingleConfirmedText(d,u))}(),l.friendRequestActionType=m.friendRequestActionType,l.notification.notificationSourceType===m.notificationSourceType.friendRequestReceived?1!==n||1!==f||i[0].IsAccepted?1===n&&1===f&&i[0].IsAccepted?l.notification.friendRequestActionType=m.friendRequestActionType.chatBtn:l.notification.friendRequestActionType=m.friendRequestActionType.viewAllBtn:l.notification.friendRequestActionType=i[0].IsAccepted?m.friendRequestActionType.chatBtn:m.friendRequestActionType.acceptIgnoreBtns:l.notification.notificationSourceType===m.notificationSourceType.friendRequestAccepted&&1===n&&1===f&&(l.notification.friendRequestActionType=m.friendRequestActionType.chatBtn),l.thumbnailTypes=a.thumbnailTypes}}}a.$inject=["notificationStreamUtility","$log","thumbnailConstants"],n.a.directive("friendRequest",a),e.default=a},function(t,e,i){"use strict";i.r(e);var f=i(0),n=i(2),u=i.n(n),a=i(1);function o(o,r,c,t,s,l,e){var d=t.gameUpdateInteractions;return{restrict:"A",replace:!0,templateUrl:s.templates.gameUpdateTemplate,scope:{library:"=",appMeta:"=",contentViewManager:"=",notification:"=?",gameUpdateModel:"=?"},link:function(e,t,i){var n,a=$(t);if(!e.gameUpdateModel){if(!e.notification)return;if((n=e.notification.metadataCollection)&&0<n.length&&(e.gameUpdateModel=e.library.gameUpdateModels[n[0].UniverseId]),!e.gameUpdateModel)return}e.notificationSourceType=s.notificationSourceType,n&&1<n.length&&(e.isAggregated=!0,e.aggregatedDisplayText=c.formatAggregatedDisplayText(n[0].GameName,n[1].GameName,e.notification.eventCount-2)),e.gameNameMaxLength=c.gameNameMaxLength,e.actionMenuTemplate="game-update-action-popover-template",e.isActionMenuOpen=!1,e.goToGameDetails=function(){e.library.inApp?l.navigateToFeature({feature:"GameDetails",urlPath:e.gameUpdateModel.gameLinkUrlForApp}):o.location.href=e.gameUpdateModel.gameLinkUrl},e.playButtonHandler=function(){r.markGameUpdateInteractedAsync(e.gameUpdateModel.universeId,e.gameUpdateModel.createdOnKey,d.played,e.library.currentUserId),e.library.inApp?l.launchGame({placeId:e.gameUpdateModel.rootPlaceId,requestType:"RequestGame",isPartyLeader:!1}):f.GameLauncher.joinMultiplayerGame(e.gameUpdateModel.rootPlaceId,!0,!1)},e.viewGameUpdates=function(){e.contentViewManager.selectContentView(e.library.notificationContentViews.gameUpdates),u.a.forEach(e.library.gameUpdateModels,function(t){t.seen||r.markGameUpdateInteractedAsync(t.universeId,t.createdOnKey,d.seen,e.library.currentUserId).then(function(){t.seen=!0},function(){})})},e.followGame=function(){r.followGameAsync(e.library.currentUserId,e.gameUpdateModel.universeId).then(function(){a.focus(),e.gameUpdateModel.isUnfollowed=!1,e.gameUpdateModel.updateMessage||c.getGameUpdatesAsync([e.gameUpdateModel.universeId],e.library.gameUpdateModels,null)},function(){})},e.unfollowGame=function(t){t&&t.stopPropagation&&t.stopPropagation(),r.unfollowGameAsync(e.library.currentUserId,e.gameUpdateModel.universeId).then(function(){a.focus(),e.gameUpdateModel.isUnfollowed=!0,e.isActionMenuOpen=!1,r.markGameUpdateInteractedAsync(e.gameUpdateModel.universeId,e.gameUpdateModel.createdOnKey,d.unfollowed,e.library.currentUserId)},function(){})},e.reportAbuse=function(){r.reportAbuse(e.gameUpdateModel.universeId,new Date(e.gameUpdateModel.createdOn))},e.closeActionMenu=function(){e.isActionMenuOpen=!1}}}}o.$inject=["$window","gameUpdatesService","gameUpdatesUtility","gameUpdatesConstants","notificationStreamUtility","hybridService","$log"],a.a.directive("gameUpdate",o),e.default=o},function(t,e,i){"use strict";i.r(e);var c=i(0),n=i(2),s=i.n(n),a=i(1);function o(a,o,r){return{restrict:"A",scope:!0,link:function(i,n,t){i.callbackLazyLoad=function(){if(!i.notificationApiParams)return!1;i.notificationApiParams.loadMoreNotifications&&(i.layout.notiticationsLazyLoadingEnabled=!0,a.getRecentNotifications(i.notificationApiParams.startIndexOfNotifications,i.notificationApiParams.pageSizeOfNotifications).then(function(t){i.layout.notiticationsLazyLoadingEnabled=!1,t&&0<t.length?(i.buildNotificationsList(t),i.notificationApiParams.startIndexOfNotifications=i.notificationApiParams.startIndexOfNotifications+i.notificationApiParams.pageSizeOfNotifications,t.length<i.notificationApiParams.pageSizeOfNotifications&&(i.notificationApiParams.loadMoreNotifications=!1,i.notificationApiParams.startIndexOfNotifications=0)):(i.notificationApiParams.loadMoreNotifications=!1,i.notificationApiParams.startIndexOfNotifications=0)},function(){i.layout.notiticationsLazyLoadingEnabled=!1,r.debug("---error from get Notificaitons in lazyLoadingDirective.js---")}))},i.setupScrollbar=function(){n.mCustomScrollbar({autoExpandScrollbar:!1,scrollInertia:5,contentTouchScroll:1,mouseWheel:{preventDefault:!0},callbacks:{onTotalScrollOffset:100,onTotalScroll:i.callbackLazyLoad,onOverflowYNone:i.callbackLazyLoad}})},i.destroyScrollbar=function(){r.debug("----- destroyScrollbar ----"),n.mCustomScrollbar("destroy")};var e=i.$watch(function(){return i.layout&&i.layout.isLazyLoadingRequested},function(t,e){s.a.isDefined(t)&&t!==e&&(r.debug("----- initializeLayout ----"),t?i.library.inApp?(c.Scrollbar.setUpOverflowY(n,i.callbackLazyLoad),c.Scrollbar.listenToScroll(o,null,i.callbackLazyLoad)):i.setupScrollbar():i.library.inApp||i.destroyScrollbar())},!0);i.$on("$destroy",function(){e&&e()})}}}o.$inject=["notificationStreamService","$document","$log"],a.a.directive("lazyLoading",o),e.default=o},function(t,e,i){"use strict";i.r(e);var n=i(2),r=i.n(n),a=i(1);function o(n,a){var i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"},o=function(){var t,e=document.createElement("supportedEvent");for(t in i)if(r.a.isDefined(e.style[t]))return i[t]}();return{restrict:"A",link:function(i,t,e){t.bind(o,function(t){n.debug("got a css transition event",t),0<=t.target.className.search("slide-out-left")&&i.$evalAsync(function(){i.removeNotification(i.notification.id)})}),i.updateNotificationSetting=function(e){a.updateNotificationSettings(i.notification.notificationSourceType,e).then(function(t){n.debug("turnOffNotification -- success",t),i.notification.isTurnOff=!e},function(t){n.debug("turnOffNotification --fail")})}}}}o.$inject=["$log","notificationStreamService"],a.a.directive("notificationCard",o),e.default=o},function(t,e,i){"use strict";i.r(e);var n=i(1);function a(t,e){return{restrict:"A",replace:!0,scope:!0,templateUrl:t.templates.notificationContentTemplate}}a.$inject=["notificationStreamUtility","$log"],n.a.directive("notificationContent",a),e.default=a},function(t,e,i){"use strict";i.r(e);var n=i(1);function a(t,e){return{restrict:"A",replace:!0,transclude:!0,templateUrl:t.templates.notificationContentViewTemplate,scope:{library:"=",contentViewManager:"=",viewId:"@",isActive:"=?"},link:function(t,e,i){t.contentViewManager.addContentView(t)}}}a.$inject=["notificationStreamUtility","$log"],n.a.directive("notificationContentView",a),e.default=a},function(t,e,i){"use strict";i.r(e);var n=i(1);function a(t,e){return{restrict:"A",replace:!0,scope:!0,templateUrl:t.templates.notificationStreamBaseTemplate}}a.$inject=["notificationStreamUtility","$log"],n.a.directive("notificationStreamBase",a),e.default=a},function(t,e,i){"use strict";i.r(e);var n=i(1);function a(t,e){return{restrict:"A",replace:!0,scope:!0,templateUrl:t.templates.notificationStreamBaseViewTemplate}}a.$inject=["notificationStreamUtility","$log"],n.a.directive("notificationStreamBaseView",a),e.default=a},function(t,e,i){"use strict";i.r(e);var n=i(1);function a(n,a){return{restrict:"A",replace:!0,scope:!0,link:function(e,i,t){n.on("click touchstart",function(t){e.layout&&(!e.layout.isStreamBodyInteracted&&0<i.has(t.target).length?e.layout.isStreamBodyInteracted=!0:e.layout.isStreamBodyInteracted&&0<!i.has(t.target).length&&(e.layout.isStreamBodyInteracted=!1),a.debug(" ------------------scope.layout.isStreamBodyInteracted----------------- "+e.layout.isStreamBodyInteracted))})}}}a.$inject=["$document","$log"],n.a.directive("notificationStreamBody",a),e.default=a},function(t,e,i){"use strict";i.r(e);var n=i(1);function a(t,e){return{restrict:"A",replace:!0,scope:!0,templateUrl:t.templates.notificationStreamContainerTemplate}}a.$inject=["notificationStreamUtility","$log"],n.a.directive("notificationStreamContainer",a),e.default=a},function(t,e,i){"use strict";i.r(e);var n=i(1),r=i(0);function a(a,t,o){return{restrict:"A",replace:!0,scope:{notification:"=",appMeta:"=",library:"=",interactNotification:"&"},templateUrl:a.templates.privateMessageTemplate,link:function(n,t,e){!function(){n.thumbnailTypes=o.thumbnailTypes,n.notificationSourceType=a.notificationSourceType,n.friendRequestLink=a.layout.friendRequestLink,n.privateMessageLayout={displayUserId:null,displayUserName:"",messagePreview:"",isStacked:!1};var t=n.notification.metadataCollection,e=n.notification.notificationSourceType;if((1<n.notification.eventCount||t&&0===t.length)&&(n.privateMessageLayout.isStacked=!0),t&&0<t.length){var i=a.normalizeUser(e,t[0]);n.privateMessageLayout.displayUserId=i.userId,n.privateMessageLayout.displayUserName=r.DisplayNames&&r.DisplayNames.Enabled()?i.displayName:i.userName,n.privateMessageLayout.messagePreview=t[0].BodyPreview}}()}}}a.$inject=["notificationStreamUtility","$log","thumbnailConstants"],n.a.directive("privateMessage",a),e.default=a},function(t,e,i){"use strict";i.r(e);var n=i(1);function a(t,e){return{restrict:"A",replace:!0,scope:!0,templateUrl:t.templates.testTemplate,link:function(e,t,i){var n=e.notification.metadataCollection;e.notificationDisplayText="",n.forEach(function(t){e.notificationDisplayText+=t.Detail})}}}a.$inject=["notificationStreamUtility","$log"],n.a.directive("test",a),e.default=a},function(t,e,i){var n={"./notificationStreamBaseController.js":27,"./notificationStreamController.js":28,"./notificationsController.js":29};function a(t){var e=o(t);return i(e)}function o(t){if(i.o(n,t))return n[t];var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}a.keys=function(){return Object.keys(n)},a.resolve=o,(t.exports=a).id=26},function(t,e,i){"use strict";i.r(e);var u=i(0),n=i(2),p=i.n(n),a=i(1);function o(r,e,t,i,c,n,a,o,s,l,d){function f(){r.layout=p.a.copy(c.layout),r.notificationApiParams=p.a.copy(c.notificationApiParams),function(){var t=p.a.element(".notification-stream-icon .notification-red");t&&!Number.isNaN(t)&&(r.library.unreadNotifications=parseInt(t.html(),10))}(),r.library.inApp&&(r.openNotificationStream(),r.layout.isNotificationContentOpen=!0)}r.buildNotificationsList=function(t){var o=[];t.forEach(function(t){var e=t.metadataCollection,a=t.notificationSourceType;c.isNotificationTypeValid(a)&&(c.isGameUpdateNotification(a)||e.forEach(function(t){var e=c.normalizeUser(a,t);if(e&&null!=e.userId&&null!=e.userName){var i=e.userId,n=e.userName;if(-1<r.library.userIdList.indexOf(i))return!1;o.push(i),r.library.userIdList.push(i),r.library.userLibrary[i]={id:i,name:n,profileLink:c.getAbsoluteUrl(c.links.profileLink,{id:i})}}}),t.isClickable=c.isCardClickable(t),r.notificationIds.indexOf(t.id)<0&&r.notificationIds.push(t.id),r.notifications[t.id]=t)}),r.layout.emptyNotificationEnabled=0===r.notificationIds.length},r.buildGameUpdateNotifications=function(n){if(n&&0!==n.length){var a=r.library.gameUpdateModels;o.getGameFollowingsForUserAsync(r.library.currentUserId).then(function(t){var e,i=[];for(e=0;e<t.length;e++)i.push(t[e].universeId);return s.getGameUpdatesAsync(i,a)}).then(function(t){var e,i=s.aggregateGameUpdateNotifications(n,a);i&&(r.notifications[i.id]=i,r.notificationIds.unshift(i.id),s.fillGameDetails(a),1===i.metadataCollection.length&&(e=a[i.metadataCollection[0].UniverseId],o.markGameUpdateInteractedAsync(e.universeId,e.createdOnKey,l.gameUpdateInteractions.seen,r.library.currentUserId)))})}},r.getRecentNotifications=function(){r.layout.getRecentDataInitialized=!1,i.getRecentNotifications(r.notificationApiParams.startIndexOfNotifications,r.notificationApiParams.pageSizeOfNotifications).then(function(t){var e=[],i=[];r.layout.getRecentDataInitialized=!0,r.layout.isGetRecentDataLoadedRequested=!1,t&&0<t.length&&(p.a.forEach(t,function(t){c.isGameUpdateNotification(t.notificationSourceType)?e.push(t):i.push(t)}),r.buildNotificationsList(i),0<e.length&&r.buildGameUpdateNotifications(e),r.layout.isLazyLoadingRequested=!0,t.length===r.notificationApiParams.pageSizeOfNotifications&&(r.notificationApiParams.startIndexOfNotifications=r.notificationApiParams.startIndexOfNotifications+r.notificationApiParams.pageSizeOfNotifications,r.notificationApiParams.loadMoreNotifications=!0))},function(){d.debug("--- getRecentNotifications call failed ----- "),r.layout.getRecentDataInitialized=!0})},r.clearUnreadNotifications=function(){0<r.library.unreadNotifications&&(r.library.unreadNotifications=0,e.triggerHandler("Roblox.NotificationStream.UnreadNotifications",{count:0,isNotificationContentOpen:r.layout.isNotificationContentOpen}))},r.openNotificationStream=function(){r.layout.isGetRecentDataLoadedRequested&&(r.resetNotificationStreamData(),r.getRecentNotifications()),e.triggerHandler("Roblox.NotificationStream.ClearUnreadNotifications",{}),r.clearUnreadNotifications()},r.toggleNotificationContent=function(t){t?r.layout.isNotificationContentOpen=!1:(r.layout.isNotificationContentOpen=!r.layout.isNotificationContentOpen,r.layout.isNotificationContentOpen&&r.layout.isGetRecentDataLoadedRequested&&r.openNotificationStream()),r.layout.isNotificationContentOpen&&r.layout.bannerEnabled&&(r.layout.bannerEnabled=!1),r.layout.isLazyLoadingRequested&&(r.layout.isLazyLoadingRequested=!1)},r.getUnreadNotificationCount=function(){i.unreadCount().then(function(t){t&&(r.library.unreadNotifications=t.unreadNotifications,r.layout.isNotificationContentOpen?r.layout.bannerText=c.textTemplate.newNotification(r.library.unreadNotifications):e.triggerHandler("Roblox.NotificationStream.UnreadNotifications",{count:t.unreadNotifications,isNotificationContentOpen:r.layout.isNotificationContentOpen}))},function(){d.debug("--- unreadCount call failed ----- ")})},r.resetNotificationStreamData=function(){r.notificationIds=[],r.notifications={},r.notificationApiParams&&(r.notificationApiParams.startIndexOfNotifications=0)},r.reloadNotificationStreamData=function(){r.resetNotificationStreamData(),e.triggerHandler("Roblox.NotificationStream.ClearUnreadNotifications",{}),r.getRecentNotifications(),r.layout.bannerEnabled=!1},r.updateNewNotificationInfo=function(){r.layout.isGetRecentDataLoadedRequested=!0,r.getUnreadNotificationCount(),r.layout.isNotificationContentOpen&&r.$evalAsync(function(){r.layout.bannerEnabled=!0})},r.updateSettingsInLibrary=function(t){r.library.currentUserId=u.CurrentUser.userId,r.library.inApp=!!u.DeviceMeta&&Object(u.DeviceMeta)().isInApp,r.library.isPhone=!!u.DeviceMeta&&Object(u.DeviceMeta)().isPhone,r.library.inAndroidApp=!!u.DeviceMeta&&Object(u.DeviceMeta)().isAndroidApp,r.library.iniOSApp=!!u.DeviceMeta&&Object(u.DeviceMeta)().isIosApp,r.library.inUWPApp=!!u.DeviceMeta&&Object(u.DeviceMeta)().isUWPApp,r.library.bannerDismissTimeSpan=t.bannerDismissTimeSpan,r.library.signalRDisconnectionResponseInMilliseconds=t.signalRDisconnectionResponseInMilliseconds,r.library.eventStreamMetaData={userId:r.library.currentUserId,inApp:r.library.inApp},r.library.canLaunchGameFromGameUpdate=t.canLaunchGameFromGameUpdate},r.handleSignalRSuccess=function(){r.$evalAsync(function(){r.layout.errorBannerEnabled=!1})},r.handleSignalRError=function(){t(function(){r.layout.errorBannerEnabled=!0,r.layout.errorText=c.textTemplate.noNetworkConnectionText()},r.library.signalRDisconnectionResponseInMilliseconds)},r.handleNotificationStreamNotification=function(t){switch(d.debug("--------- this is NotificationStream subscription -----------".concat(t.Type)),t.Type){case c.signalRType.NewNotification:r.updateNewNotificationInfo();break;case c.signalRType.NotificationsRead:r.clearUnreadNotifications();break;case c.signalRType.NotificationRevoked:r.getUnreadNotificationCount(),r.layout.isStreamBodyInteracted||r.reloadNotificationStreamData()}},r.handleChatPrivacySettingNotification=function(e){d.debug("--------- this is ChatPrivacySettingNotifications subscription -----------".concat(e.Type));try{switch(e.Type){case c.signalRType.chatEnabled:r.library.isChatDisabledByPrivacySetting=!1;break;case c.signalRType.chatDisabled:r.library.isChatDisabledByPrivacySetting=!0}}catch(t){var i="ChatPrivacySettingNotifications:".concat(e.Type,": ");t&&t.message&&(i+=t.message),d.debug(i)}},r.getChatPrivacySetting=function(){i.getChatPrivacySettings().then(function(t){r.library.isChatDisabledByPrivacySetting=t&&!t.chatEnabled},function(t){d.debug(t)})},r.initializeRealTimeSubscriptions=function(){if(p.a.isDefined(u.RealTime)){var t=u.RealTime.Factory.GetClient();t.SubscribeToConnectionEvents(r.handleSignalRSuccess,r.handleSignalRSuccess,r.handleSignalRError,c.notificationsName.NotificationStream),t.Subscribe(c.notificationsName.NotificationStream,r.handleNotificationStreamNotification),t.Subscribe(c.notificationsName.ChatPrivacySettingNotifications,r.handleChatPrivacySettingNotification)}},r.initializeNotificationStream=function(){!function(){try{r.library=r.library||c.library,r.resetNotificationStreamData(),r.getChatPrivacySetting(),i.initialize().then(function(t){t&&(c.layout.pageDataInitialized=!0,r.updateSettingsInLibrary(t))},function(){d.debug("----- initialize data request failed ----")})}catch(t){var e="initializePageData:";t&&t.message&&(e+=t.message),d.debug(e)}}(),f(),function(){if(!r.layout.isNotificationContentOpen){var t=p.a.copy(r.library.eventStreamMetaData);t.countOfUnreadNotification=r.library.unreadNotifications,a.sendEventWithTarget(a.eventNames.notificationStream.openContent,"click",t)}r.toggleNotificationContent(),r.layout.isNotificationContentOpen=!r.layout.isNotificationContentOpen}(),r.initializeRealTimeSubscriptions()},r.initializeNotificationStream()}o.$inject=["$scope","$document","$timeout","notificationStreamService","notificationStreamUtility","userService","eventStreamService","gameUpdatesService","gameUpdatesUtility","gameUpdatesConstants","$log"],a.a.controller("notificationStreamBaseController",o),e.default=o},function(t,e,i){"use strict";i.r(e);var u=i(0),n=i(2),p=i.n(n),a=i(1);function o(c,e,t,i,s,n,a,o,r,l,d){c.updatePopoverLayout=function(){u.Popover&&t(function(){return u.Popover.setUpTrianglePosition(c.layout.dataBindSelector,c.layout.dataContainerSelector)})},c.buildNotificationsList=function(t){var r=[];t.forEach(function(t){var e=t.metadataCollection,o=t.notificationSourceType;s.isNotificationTypeValid(o)&&(s.isGameUpdateNotification(o)||e.forEach(function(t){var e=s.normalizeUser(o,t);if(e&&null!=e.userId&&null!=e.userName){var i=e.userId,n=e.userName,a=e.displayName;if(-1<c.library.userIdList.indexOf(i))return!1;r.push(i),c.library.userIdList.push(i),c.library.userLibrary[i]={id:i,name:n,displayName:a,profileLink:s.getAbsoluteUrl(s.links.profileLink,{id:i})}}}),t.isClickable=s.isCardClickable(t),c.notificationIds.indexOf(t.id)<0&&c.notificationIds.push(t.id),c.notifications[t.id]=t)}),c.layout.emptyNotificationEnabled=0===c.notificationIds.length},c.buildGameUpdateNotifications=function(n){if(n&&0!==n.length){var a=c.library.gameUpdateModels;o.getGameFollowingsForUserAsync(c.library.currentUserId).then(function(t){var e,i=[];for(e=0;e<t.length;e++)i.push(t[e].universeId);return r.getGameUpdatesAsync(i,a)}).then(function(t){var e,i=r.aggregateGameUpdateNotifications(n,a);i&&(c.notifications[i.id]=i,c.notificationIds.unshift(i.id),r.fillGameDetails(a),1===i.metadataCollection.length&&(e=a[i.metadataCollection[0].UniverseId],o.markGameUpdateInteractedAsync(e.universeId,e.createdOnKey,l.gameUpdateInteractions.seen,c.library.currentUserId)))})}},c.getRecentNotifications=function(){c.layout.getRecentDataInitialized=!1,i.getRecentNotifications(c.notificationApiParams.startIndexOfNotifications,c.notificationApiParams.pageSizeOfNotifications).then(function(t){var e=[],i=[];c.layout.getRecentDataInitialized=!0,c.layout.isGetRecentDataLoadedRequested=!1,t&&0<t.length&&(p.a.forEach(t,function(t){s.isGameUpdateNotification(t.notificationSourceType)?e.push(t):i.push(t)}),c.buildNotificationsList(i),0<e.length&&c.buildGameUpdateNotifications(e),c.layout.isLazyLoadingRequested=!0,t.length===c.notificationApiParams.pageSizeOfNotifications&&(c.notificationApiParams.startIndexOfNotifications=c.notificationApiParams.startIndexOfNotifications+c.notificationApiParams.pageSizeOfNotifications,c.notificationApiParams.loadMoreNotifications=!0))},function(){d.debug("--- getRecentNotifications call failed ----- "),c.layout.getRecentDataInitialized=!0})},c.clearUnreadNotifications=function(){0<c.library.unreadNotifications&&(c.library.unreadNotifications=0,e.triggerHandler("Roblox.NotificationStream.UnreadNotifications",{count:0,isNotificationContentOpen:c.layout.isNotificationContentOpen}))},c.openNotificationStream=function(){c.layout.isGetRecentDataLoadedRequested&&(c.resetNotificationStreamData(),c.getRecentNotifications()),0<c.library.unreadNotifications&&i.clearUnread().then(function(){c.clearUnreadNotifications()},function(){d.debug("--- clearUnread call failed ----- ")})},c.toggleNotificationContent=function(t){t?c.layout.isNotificationContentOpen=!1:(c.layout.isNotificationContentOpen=!c.layout.isNotificationContentOpen,c.layout.isNotificationContentOpen&&c.layout.isGetRecentDataLoadedRequested&&(c.openNotificationStream(),c.updatePopoverLayout())),c.layout.isNotificationContentOpen&&c.layout.bannerEnabled&&(c.layout.bannerEnabled=!1),c.layout.isLazyLoadingRequested&&(c.layout.isLazyLoadingRequested=!1)},c.getUnreadNotificationCount=function(){i.unreadCount().then(function(t){t&&(c.library.unreadNotifications=t.unreadNotifications,c.layout.isNotificationContentOpen?c.layout.bannerText=s.textTemplate.newNotification(c.library.unreadNotifications):e.triggerHandler("Roblox.NotificationStream.UnreadNotifications",{count:t.unreadNotifications,isNotificationContentOpen:c.layout.isNotificationContentOpen}))},function(){d.debug("--- unreadCount call failed ----- ")})},c.resetNotificationStreamData=function(){c.notificationIds=[],c.notifications={},c.notificationApiParams&&(c.notificationApiParams.startIndexOfNotifications=0)},c.reloadNotificationStreamData=function(){c.resetNotificationStreamData(),0<c.library.unreadNotifications&&i.clearUnread(),c.getRecentNotifications(),c.layout.bannerEnabled=!1},c.updateNewNotificationInfo=function(){c.layout.isGetRecentDataLoadedRequested=!0,c.getUnreadNotificationCount(),c.layout.isNotificationContentOpen&&c.$evalAsync(function(){c.layout.bannerEnabled=!0})},c.updateSettingsInLibrary=function(t){c.library.currentUserId=u.CurrentUser.userId,c.library.inApp=!!u.DeviceMeta&&Object(u.DeviceMeta)().isInApp,c.library.isPhone=!!u.DeviceMeta&&Object(u.DeviceMeta)().isPhone,c.library.inAndroidApp=!!u.DeviceMeta&&Object(u.DeviceMeta)().isAndroidApp,c.library.iniOSApp=!!u.DeviceMeta&&Object(u.DeviceMeta)().isIosApp,c.library.inUWPApp=!!u.DeviceMeta&&Object(u.DeviceMeta)().isUWPApp,c.library.bannerDismissTimeSpan=t.bannerDismissTimeSpan,c.library.signalRDisconnectionResponseInMilliseconds=t.signalRDisconnectionResponseInMilliseconds,c.library.eventStreamMetaData={userId:c.library.currentUserId,inApp:c.library.inApp},c.library.canLaunchGameFromGameUpdate=t.canLaunchGameFromGameUpdate},c.handleSignalRSuccess=function(){c.$evalAsync(function(){c.layout.errorBannerEnabled=!1})},c.handleSignalRError=function(){t(function(){c.layout.errorBannerEnabled=!0,c.layout.errorText=s.textTemplate.noNetworkConnectionText()},c.library.signalRDisconnectionResponseInMilliseconds)},c.handleNotificationStreamNotification=function(t){switch(d.debug("--------- this is NotificationStream subscription -----------"+t.Type),t.Type){case s.signalRType.NewNotification:c.updateNewNotificationInfo();break;case s.signalRType.NotificationsRead:c.clearUnreadNotifications();break;case s.signalRType.NotificationRevoked:c.getUnreadNotificationCount(),c.layout.isStreamBodyInteracted||c.reloadNotificationStreamData()}},c.handleChatPrivacySettingNotification=function(e){d.debug("--------- this is ChatPrivacySettingNotifications subscription -----------"+e.Type);try{switch(e.Type){case s.signalRType.chatEnabled:c.library.isChatDisabledByPrivacySetting=!1;break;case s.signalRType.chatDisabled:c.library.isChatDisabledByPrivacySetting=!0}}catch(t){var i="ChatPrivacySettingNotifications:"+e.Type+": ";t&&t.message&&(i+=t.message),d.debug(i)}},c.getChatPrivacySetting=function(){i.getChatPrivacySettings().then(function(t){c.library.isChatDisabledByPrivacySetting=t&&!t.chatEnabled},function(t){d.debug(t)})},c.initializeRealTimeSubscriptions=function(){if(p.a.isDefined(u.RealTime)){var t=u.RealTime.Factory.GetClient();t.SubscribeToConnectionEvents(c.handleSignalRSuccess,c.handleSignalRSuccess,c.handleSignalRError,s.notificationsName.NotificationStream),t.Subscribe(s.notificationsName.NotificationStream,c.handleNotificationStreamNotification),t.Subscribe(s.notificationsName.ChatPrivacySettingNotifications,c.handleChatPrivacySettingNotification)}},s.layout.pageDataInitialized||function(){try{c.library=s.library,c.resetNotificationStreamData(),u.Popover&&u.Popover.init(),c.getChatPrivacySetting(),i.initialize().then(function(t){t&&(s.layout.pageDataInitialized=!0,c.updateSettingsInLibrary(t))},function(){d.debug("----- initialize data request failed ----")})}catch(t){var e="initializePageData:";t&&t.message&&(e+=t.message),d.debug(e)}}(),e.bind("Roblox.Popover.Status",function(t,e){d.debug("notificationStreamController"),c.layout&&c.$evalAsync(function(){if(!c.layout.isNotificationContentOpen&&!e.isHidden){var t=p.a.copy(c.library.eventStreamMetaData);t.countOfUnreadNotification=c.library.unreadNotifications,a.sendEventWithTarget(a.eventNames.notificationStream.openContent,e.eventType,t)}c.toggleNotificationContent(e.isHidden)})});var f=c.$watch(function(){return s.layout.pageDataInitialized},function(t,e){p.a.isDefined(t)&&t&&t!==e&&(d.debug("----- initializeLayout ----"),c.layout=p.a.copy(s.layout),c.notificationApiParams=p.a.copy(s.notificationApiParams),c.getUnreadNotificationCount(),c.library.inApp&&(c.openNotificationStream(),c.layout.isNotificationContentOpen=!0),c.initializeRealTimeSubscriptions())});c.$on("$destroy",function(){f&&f()})}o.$inject=["$scope","$document","$timeout","notificationStreamService","notificationStreamUtility","userService","eventStreamService","gameUpdatesService","gameUpdatesUtility","gameUpdatesConstants","$log"],a.a.controller("notificationStreamController",o),e.default=o},function(t,e,i){"use strict";i.r(e);var n=i(2),p=i.n(n),a=i(1);function o(o,a,r,c,s,l,d,n,f){function u(t,e,i){var n=o.notifications[e],a=p.a.copy(o.library.eventStreamMetaData);a.notificationType=n.notificationSourceType,s.sendEventWithTarget(t,i,a)}var i;o.parseErrorFromApiResponse=function(t){return t&&t.errors&&t.errors[0]},o.acceptFriend=function(t,e,i){f.debug("---------------- acceptFriend --------- ");var n=o.notifications[e];o.interactNotification(n),a.acceptFriendV2(t).then(function(t){o.onAcceptFriendSuccess(e,i)},function(t){var e=o.parseErrorFromApiResponse(t);e&&e.userFacingMessage&&(o.layout.errorText=e.userFacingMessage,o.layout.errorBannerEnabled=!0)})},o.onAcceptFriendSuccess=function(t,e){var i=o.notifications[t];i.friendRequestActionType=r.friendRequestActionType.chatBtn,i.metadataCollection[0].IsAccepted=!0,i.isFlipped=!0,n.triggerHandler("Roblox.Friends.CountChanged"),u(s.eventNames.notificationStream.acceptFriendRequest,t,e.type)},o.ignoreFriend=function(t,e,i){f.debug("---------------- ignoreFriend --------- ");var n=o.notifications[e];o.interactNotification(n),a.ignoreFriendV2(t).then(function(t){o.onIgnoreFriend(e,i)},function(t){o.onIgnoreFriend(e,i)})},o.onIgnoreFriend=function(t,e){o.notifications[t].isSlideOut=!0,u(s.eventNames.notificationStream.ignoreFriendRequest,t,e.type)},o.removeNotification=function(t){f.debug("---------------- removeNotification --------- notificationId:  "+t);var e=o.notificationIds.indexOf(t);o.notificationIds.splice(e,1),delete o.notifications[t]},o.chat=function(t,e,i){if(!o.library.isChatDisabledByPrivacySetting){var n=o.notifications[e];o.interactNotification(n);var a=d.buildPermissionVerifier(o.library);a.uwpApp.hybridRequired=!0,d.startChat(t,a),u(s.eventNames.notificationStream.chat,e,i.type)}},o.interactNotification=function(t){t.isInteracted||a.markInteracted(t.id).then(function(){t.isInteracted=!0})},o.clickCard=function(t){var e="",i={};switch(t.notificationSourceType){case r.notificationSourceType.friendRequestReceived:if(o.interactNotification(t),1<t.eventCount||0===t.metadataCollection.length)e=r.links.friendRequestLink,o.library.inApp?(i={feature:r.links.friendRequestTabName,urlPath:e},c.navigateToFeature(i,function(t){f.debug("openUserFriendsPage ---- status:"+t)})):window.location.href=l.getAbsoluteUrl(e);else if(t.metadataCollection&&0<t.metadataCollection.length){var n=t.metadataCollection[0];e=r.links.profileLink;var a=n.SenderUserId;o.library.inApp?c.openUserProfile(parseInt(a),function(t){f.debug("openUserProfile ---- status:"+t)}):window.location.href=r.getAbsoluteUrl(e,{id:a})}break;case r.notificationSourceType.friendRequestAccepted:o.interactNotification(t),e=r.links.friendsLink,o.library.inApp?(i={feature:r.links.friendsTabName,urlPath:e},c.navigateToFeature(i,function(t){f.debug("openUserFriendsPage ---- status:"+t)})):window.location.href=l.getAbsoluteUrl(e);break;case r.notificationSourceType.privateMessageReceived:if(o.interactNotification(t),1<t.eventCount||0===t.metadataCollection.length)e=r.links.inboxLink;else if(t.metadataCollection&&0<t.metadataCollection.length){n=t.metadataCollection[0];e=r.links.inboxLink+r.links.inboxMessageDetailQuery+n.MessageId}o.library.inApp?(i={feature:r.links.inboxTabName,urlPath:e},c.navigateToFeature(i,function(t){f.debug("openUserProfile ---- status:"+t)})):window.location.href=l.getAbsoluteUrl(e);break;case r.notificationSourceType.developerMetricsAvailable:o.interactNotification(t)}},o.notificationSourceType=r.notificationSourceType,o.contentViewManager=(i={},{addContentView:function(t){i[t.viewId]=t},selectContentView:function(t){var e=i[t];e&&(p.a.forEach(i,function(t){t.isActive=!1}),e.isActive=!0)}}),n.bind("Roblox.Popover.Status",function(t,e){f.debug("notificationsController"),e.isOpen||o.contentViewManager.selectContentView(o.library.notificationContentViews.main)})}o.$inject=["$scope","notificationStreamService","notificationStreamUtility","hybridService","eventStreamService","urlService","chatDispatchService","$document","$log"],a.a.controller("notificationsController",o),e.default=o},function(t,e,i){var n={"./gameUpdatesService.js":31,"./gameUpdatesUtility.js":32,"./layoutLibraryI18nService.js":33,"./notificationStreamService.js":34,"./notificationStreamUtility.js":35};function a(t){var e=o(t);return i(e)}function o(t){if(i.o(n,t))return n[t];var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}a.keys=function(){return Object.keys(n)},a.resolve=o,(t.exports=a).id=30},function(t,e,i){"use strict";i.r(e);var c=i(0),n=i(2),d=i.n(n),a=i(1);function o(s,l,t,n,e,a){var r=e.endpoints,i=e.apiParams;function o(t,e,i,n){var a,o,r=[],c=0;for(o=e.slice(c,i);0<o.length&&c<e.length;)a=n(o),r.push(s.httpGet(t,a)),c+=i,o=e.slice(c,c+i);return l.all(r)}return{markGameUpdateReadAsync:function(t,e,i){var n=r.getReadEndpoint(),a={universeId:t,createdOn:e.toString(),currentUserId:i};return s.httpPost(n,a)},markGameUpdateInteractedAsync:function(t,e,i,n){var a=r.getInteractedEndpoint(),o={universeId:t,createdOnKey:e,interactionType:i,currentUserId:n};return s.httpPost(a,o)},multiGetPlaceDetailsAsync:function(t){return t&&0!==t.length?function(t){return o(r.getGameDetailsEndpoint(),t,i.placeDetailBatchSize,function(t){return{placeIds:t}}).then(function(t){var e={};return t&&0!==t.length?(d.a.forEach(t,function(t){t&&d.a.forEach(t,function(t){e[t.placeId]={universeId:t.universeId,isPlayable:t.isPlayable,imageToken:t.imageToken}})}),e):null})}(t):l(function(t,e){t(null)})},multiGetGameIconsAsync:function(t){return t&&0!==t.length?function(t){return o(r.getGameIconsEndpoint(),t,i.gameIconBatchSize,function(t){return{size:i.gameIconSize,format:i.gameIconFormat,universeIds:t}}).then(function(t){var e={};return t&&0!==t.length?(d.a.forEach(t,function(t){t&&t.data&&d.a.forEach(t.data,function(t){e[t.targetId]=t.imageUrl})}),e):null})}(t):l(function(t,e){t(null)})},multiGetGameUpdatesAsync:function(t,e){return t&&0!==t.length?function(t){return o(r.getGameUpdatesEndpoint(),t,i.gameUpdateBatchSize,function(t){return{universeIds:t}}).then(function(t){var e=[];return t&&0!==t.length?(d.a.forEach(t,function(t){t&&d.a.forEach(t,function(t){e.push(t)})}),e):null})}(t):l(function(t,e){t(null)})},getGameFollowingsForUserAsync:function(t){var e=r.getGameFollowingsEndpoint(t);return s.httpGet(e,{})},followGameAsync:function(t,e){var i=r.getFollowGameEndpoint(t,e);return s.httpPost(i,{})},unfollowGameAsync:function(t,e){var i=r.getFollowGameEndpoint(t,e);return s.httpDelete(i,{})},reportAbuse:function(t,e){var i=n.getAbsoluteUrl(r.getAbuseReportUrl(t,e,encodeURIComponent(a.location.href)));c.AbuseReportDispatcher?c.AbuseReportDispatcher.triggerUrlAction(i):a.location.href=i}}}o.$inject=["httpService","$q","$log","urlService","gameUpdatesConstants","$window"],a.a.factory("gameUpdatesService",o),e.default=o},function(t,e,i){"use strict";i.r(e);var n=i(2),f=i.n(n),a=i(1);function o(r,s,t,e,n,i){var l=e.parseEpochMilliseconds,d=i.gameNameMaxLength;return{formatAggregatedDisplayText:function(t,e,i){return 0===i?n.gameUpdates.formatDisplayTextDouble(t,e):n.gameUpdates.formatDisplayTextMultiple(t,e,i)},getGameUpdatesAsync:function(t,c,e){return r.multiGetGameUpdatesAsync(t,e?new Date(e.getTime()-6e4):null).then(function(t){var e,i,n,a,o,r;if(!t||0===t.length)return null;for(e=0;e<t.length;e++)i=t[e],a=l(i.createdOn),c.hasOwnProperty(i.universeId)?((n=c[i.universeId]).updateMessage=i.content,n.createdOn=a,n.createdOnKey=i.createdOnKey):c[i.universeId]={universeId:i.universeId,rootPlaceId:i.rootPlaceId,updateMessage:i.content,createdOn:a,createdOnKey:i.createdOnKey,gameName:i.universeName,truncatedGameName:(o=i.universeName,r=void 0,r=o,o&&o.length>d&&(r=o.substr(0,d-3)+"..."),r),isPlayable:null,gameIconUrl:null,gameLinkUrl:i.rootPlaceId?s.getAbsoluteUrl("/games/"+i.rootPlaceId+"?originatorType=GameUpdateNotification&originatorId="+a):null,gameLinkUrlForApp:i.rootPlaceId?"games/"+i.rootPlaceId+"?originatorType=GameUpdateNotification&originatorId="+a:null};return t})},fillGameDetails:function(n,t){var e,i,a=[],o=[];for(e in n)n.hasOwnProperty(e)&&(null===(i=n[e]).isPlayable&&a.push(i.rootPlaceId),null===i.gameIconUrl&&o.push(i.universeId));0!==a.length&&(r.multiGetPlaceDetailsAsync(a).then(function(t){if(t)return f.a.forEach(t,function(t,e){var i=n[t.universeId];i&&(i.isPlayable=t.isPlayable)}),t}),0<o.length&&r.multiGetGameIconsAsync(o).then(function(t){!function(t){t&&f.a.forEach(t,function(t,e){var i=n[e];i&&(i.gameIconUrl=t)})}(t)}))},aggregateGameUpdateNotifications:function(t,i){if(!t||0===t.length)return null;var n=null,a=null,o=null,r=0,c={},s={};return s.id=t[0].id,s.notificationSourceType=t[0].notificationSourceType,s.metadataCollection=[],f.a.forEach(t,function(t){var e;t.eventDate&&(e=l(t.eventDate),(!n||n<e)&&(n=e,o=t.eventDate),(!a||e<a)&&(a=e)),f.a.forEach(t.metadataCollection,function(t){i.hasOwnProperty(t.UniverseId)&&!c.hasOwnProperty(t.UniverseId)&&(s.metadataCollection.push(t),c[t.UniverseId]=!0)}),t.eventCount&&(r+=t.eventCount)}),s.eventDate=o,s.minEventDate=new Date(a),s.eventCount=Math.max(r,s.metadataCollection.length),0<s.metadataCollection.length?s:null},sortGameUpdatesByCreatedDate:function(e,i){if(!e)return null;var t=Object.keys(e).map(function(t){return e[t]});return t.sort(function(t,e){return i?t.createdOn-e.createdOn:e.createdOn-t.createdOn}),t}}}o.$inject=["gameUpdatesService","urlService","$log","notificationStreamUtility","layoutLibraryService","gameUpdatesConstants"],a.a.factory("gameUpdatesUtility",o),e.default=o},function(t,e,i){"use strict";i.r(e);var n=i(1);function a(t,e){var n=e;return{links:{profileLinkName:"goToProfilePage",profileLink:"/users/{id}/profile",friendRequestLinkName:"viewAllFriendRequests",friendRequestTabName:"Friends",friendRequestLink:"/users/friends#!/friend-requests",settingLinkName:"goToSettingPage",settingTabName:"Settings",settingLink:"/my/account#!/notifications",friendsTabName:"Friends",friendsLink:"/users/friends",inboxTabName:"Messages",inboxLink:"/my/messages/#!/inbox",inboxMessageDetailQuery:"?conversationId="},stringTemplates:{boldLink:"<a class='font-caption-header'>{username}</a>",userLink:"<a class='text-name small font-caption-header' type='goToProfilePage' user_id='{userid}' href='{profilelink}'>{username}</a>",boldDisplayNameLink:"<a class='font-caption-header'>{displayname}</a>",displayNameLink:"<span class='display-name-wrapper'><a class='text-name small font-caption-header' type='goToProfilePage' user_id='{userid}' href='{profilelink}'>{displayname}</a><span class='text small username font-caption-header'> · @{username}</span></span>"},newFriendRequests:function(t){return n.get("Message.YouHaveNewFriendRequests",{numberOfRequests:t})},newFriends:function(t){return n.get("Message.YouHaveNewFriends",{numberOfFriends:t})},friendRequestAcceptedSingle:function(t){return n.get("Message.FriendRequestAcceptedSingle",{userOne:t})},friendRequestAcceptedDouble:function(t,e){return n.get("Message.FriendRequestAcceptedDouble",{userOne:t,userTwo:e})},friendRequestAcceptedMultiple:function(t,e,i){return n.get("Message.FriendRequestAcceptedMultiple",{userOne:t,userTwo:e,userMultipleCount:i})},friendRequestSentSingle:function(t){return n.get("Message.FriendRequestSentSingle",{userOne:t})},friendRequestSentDouble:function(t,e){return n.get("Message.FriendRequestSentDouble",{userOne:t,userTwo:e})},friendRequestSentMultiple:function(t,e,i){return n.get("Message.FriendRequestSentMultiple",{userOne:t,userTwo:e,userMultipleCount:i})},confirmAcceptedSingle:function(t){return n.get("Message.ConfirmAcceptedSingle",{userOne:t})},confirmAcceptedDouble:function(t,e){return n.get("Message.ConfirmAcceptedDouble",{userOne:t,userTwo:e})},confirmAcceptedMultiple:function(t,e,i){return n.get("Message.ConfirmAcceptedMultiple",{userOne:t,userTwo:e,userMultipleCount:i})},confirmSentSingle:function(t){return n.get("Message.ConfirmSentSingle",{userOne:t})},confirmSentDouble:function(t,e){return n.get("Message.ConfirmSentDouble",{userOne:t,userTwo:e})},confirmSentMultiple:function(t,e,i){return n.get("Message.ConfirmSentMultiple",{userOne:t,userTwo:e,userMultipleCount:i})},textTemplate:{newNotification:function(t){return n.get("Message.NumberofNewNotifications",{notificationCount:t})},noNetworkConnectionText:function(){return n.get("Label.NoNetworkConnectionText")}},friendRequestActionType:{acceptIgnoreBtns:"AcceptIgnoreBtns",chatBtn:"chatBtn",viewAllBtn:"ViewAllBtn"},directiveTemplatesName:{notificationIndicatorTemplate:"notification-indicator",notificationStreamIndicatorTemplate:"notification-stream-indicator",notificationContentTemplate:"notification-content",friendRequestReceivedTemplate:"friend-request-received",friendRequestAcceptedTemplate:"friend-request-accepted",friendRequestTemplate:"friend-request",privateMessageTemplate:"private-message",developerMetricsAvailableTemplate:"developer-metrics-available",testTemplate:"test",notificationStreamBaseTemplate:"notification-stream-base",notificationStreamIconTemplate:"notification-stream-icon",notificationContentViewTemplate:"notification-content-view-template",gameUpdateTemplate:"game-update-template",gameUpdateActionPopoverTemplate:"game-update-action-popover-template",notificationStreamBaseViewTemplate:"notification-stream-base-view",notificationStreamContainerTemplate:"notification-stream-container"},notificationSourceType:{test:"Test",friendRequestReceived:"FriendRequestReceived",friendRequestAccepted:"FriendRequestAccepted",privateMessageReceived:"PrivateMessageReceived",developerMetricsAvailable:"DeveloperMetricsAvailable",gameUpdate:"GameUpdate"},gameUpdates:{formatDisplayTextDouble:function(t,e){return n.get("Message.AggregatedGameUpdateDouble",{gameOne:"<span class='font-caption-header'>"+t+"</span>",gameTwo:"<span class='font-caption-header'>"+e+"</span>"})},formatDisplayTextMultiple:function(t,e,i){return n.get("Message.AggregatedGameUpdateMultiple",{gameOne:"<span class='font-caption-header'>"+t+"</span>",gameTwo:"<span class='font-caption-header'>"+e+"</span>",otherCount:i})}}}}a.$inject=["$log","languageResource"],n.a.factory("layoutLibraryService",a),e.default=a},function(t,e,i){"use strict";i.r(e);var r=i(0),n=i(1);function a(a,t,e){var i=r.EnvironmentUrls.notificationApi,n=r.EnvironmentUrls.chatApi,o=r.EnvironmentUrls.friendsApi;return{endpoints:{initializeData:{url:i+"/v2/stream-notifications/metadata",retryable:!0},unreadCount:{url:i+"/v2/stream-notifications/unread-count",retryable:!0,withCredentials:!0},getRecent:{url:i+"/v2/stream-notifications/get-recent",retryable:!0,withCredentials:!0},clearUnread:{url:i+"/v2/stream-notifications/clear-unread",retryable:!1,withCredentials:!0},markInteracted:{url:i+"/v2/stream-notifications/mark-interacted",retryable:!1,withCredentials:!0},updateNotificationSettings:{url:i+"/v2/notifications/update-notification-settings",retryable:!1,withCredentials:!0},getChatPrivacySettings:{url:n+"/v2/chat-settings",retryable:!1,withCredentials:!0}},initialize:function(){return a.httpGet(this.endpoints.initializeData,{})},getChatPrivacySettings:function(){return a.httpGet(this.endpoints.getChatPrivacySettings,{})},unreadCount:function(){return a.httpGet(this.endpoints.unreadCount,{})},clearUnread:function(){return a.httpPost(this.endpoints.clearUnread,{})},getRecentNotifications:function(t,e){var i={startIndex:t,maxRows:e};return a.httpGet(this.endpoints.getRecent,i)},markInteracted:function(t){var e={eventId:t};return a.httpPost(this.endpoints.markInteracted,e)},acceptFriendV2:function(t){var e={url:o+"/v1/users/"+t+"/accept-friend-request",withCredentials:!0};return a.httpPost(e)},ignoreFriendV2:function(t){var e={url:o+"/v1/users/"+t+"/decline-friend-request",withCredentials:!0};return a.httpPost(e)},updateNotificationSettings:function(t,e){var i={notificationSourceType:t,receiverDestinationType:"NotificationStream",isEnabled:e},n=[];return n.push(i),a.httpPost(this.endpoints.updateNotificationSettings,n)}}}a.$inject=["httpService","$log","urlService"],n.a.factory("notificationStreamService",a),e.default=a},function(t,e,i){"use strict";i.r(e);var s=i(0),n=i(2),l=i.n(n),a=i(1);function o(t,a,e){var o=a.notificationSourceType,i=a.links,r=a.stringTemplates;function c(t){if(!t)return null;if(t.getTime)return t.getTime();if("string"!=typeof t)return null;var e=/Date\((\d+)\)/.exec(t);return e?parseInt(e[1]):new Date(t).getTime()||null}return{templates:a.directiveTemplatesName,links:i,textTemplate:a.textTemplate,stringTemplates:r,layout:{pageDataInitialized:!1,firstTimeNotificationStream:!1,getRecentDataInitialized:!1,isNotificationContentOpen:!1,isLazyLoadingRequested:!1,isGetRecentDataLoadedRequested:!0,notificationsScrollbarSelector:"#notification-stream-scrollbar",settingLink:s.Endpoints?s.Endpoints.getAbsoluteUrl(i.settingLink):i.settingLink,friendRequestLink:s.Endpoints?s.Endpoints.getAbsoluteUrl(i.friendRequestLink):i.friendRequestLink,bannerEnabled:!1,emptyNotificationEnabled:!1,notificationsLazyLoadingEnabled:!1,isNotificationsLoading:!1,isStreamBodyInteracted:!1,isDisplayNamesEnabled:s.DisplayNames&&s.DisplayNames.Enabled(),bannerText:"",errorText:"",dataBindSelector:"#notification-stream",dataContainerSelector:"#notification-stream-container"},notificationApiParams:{startIndexOfNotifications:0,pageSizeOfNotifications:10,loadMoreNotifications:!1},library:{unreadNotifications:0,userIdList:[],userLibrary:{},prefixLocalStoragekey:"user_",inApp:!1,isPhone:!1,isTouch:!!s.DeviceFeatureDetection&&s.DeviceFeatureDetection.isTouch,eventStreamMetaData:{},gameUpdateModels:{},notificationContentViews:{main:"main",gameUpdates:"gameUpdates"},canLaunchGameFromGameUpdate:!1},notificationsName:t.notifications,notificationSourceType:o,signalRType:t.types,friendRequestReceivedLayout:a.friendRequestReceivedLayout,friendRequestAcceptedLayout:a.friendRequestAcceptedLayout,friendRequestActionType:a.friendRequestActionType,getAbsoluteUrl:function(t,e){return s.Endpoints?s.Endpoints.generateAbsoluteUrl(t,e,!0):getFormatString(t,e)},getFormatString:function(t,e){for(var i in e){var n=e[i],a=new RegExp("{"+i.toLowerCase()+"(:.*?)?\\??}");t=t.replace(a,n)}return t},isNotificationTypeValid:function(t){var e=!1;for(var i in o)if(o[i]===t){e=!0;break}return e},isCardClickable:function(t){switch(t.notificationSourceType){case o.friendRequestAccepted:return 1<t.eventCount||1===t.eventCount&&0===t.metadataCollection.length;case o.privateMessageReceived:case o.developerMetricsAvailable:return!0}return!1},normalizeUser:function(t,e){var i={userId:null,userName:null,displayName:null};switch(t){case o.friendRequestReceived:i.userId=e.SenderUserId,i.userName=e.SenderUserName,i.displayName=e.SenderDisplayName;break;case o.friendRequestAccepted:i.userId=e.AccepterUserId,i.userName=e.AccepterUserName,i.displayName=e.AccepterDisplayName;break;case o.privateMessageReceived:i.userId=e.AuthorUserId,i.userName=e.AuthorUserName,i.displayName=e.AuthorDisplayName;break;case o.developerMetricsAvailable:case o.test:}return i},getUserHtmlTemplate:function(t,e){var i="",n=s.DisplayNames&&s.DisplayNames.Enabled();switch(t){case o.friendRequestAccepted:i=1<e?n?r.boldDisplayNameLink:r.boldLink:n?r.displayNameLink:r.userLink;break;case o.friendRequestReceived:default:i=n?r.displayNameLink:r.userLink}return i},normalizeYouHaveText:function(t,e){switch(t){case o.friendRequestReceived:return a.newFriendRequests(e);case o.friendRequestAccepted:return a.newFriends(e)}return{}},normalizeSingleDisplayText:function(t,e){switch(t){case o.friendRequestReceived:return a.friendRequestSentSingle(e);case o.friendRequestAccepted:return a.friendRequestAcceptedSingle(e)}return{}},normalizeSingleConfirmedText:function(t,e){switch(t){case o.friendRequestReceived:return a.confirmSentSingle(e);case o.friendRequestAccepted:return a.confirmAcceptedSingle(e)}return{}},normalizeDoubleDisplayText:function(t,e,i){switch(t){case o.friendRequestReceived:return a.friendRequestSentDouble(e,i);case o.friendRequestAccepted:return a.friendRequestAcceptedDouble(e,i)}return{}},normalizeDoubleConfirmedText:function(t,e,i){switch(t){case o.friendRequestReceived:return a.confirmSentDouble(e,i);case o.friendRequestAccepted:return a.confirmAcceptedDouble(e,i)}return{}},normalizeMultipleDisplayText:function(t,e,i,n){switch(t){case o.friendRequestReceived:return a.friendRequestSentMultiple(e,i,n);case o.friendRequestAccepted:return a.friendRequestAcceptedMultiple(e,i,n)}return{}},normalizeMultipleConfirmedText:function(t,e,i,n){switch(t){case o.friendRequestReceived:return a.confirmSentMultiple(e,i,n);case o.friendRequestAccepted:return a.confirmAcceptedMultiple(e,i,n)}return{}},buildScrollbar:function(t){l.a.element(t).mCustomScrollbar({autoHideScrollbar:!1,autoExpandScrollbar:!1,contentTouchScroll:1e4,documentTouchScroll:!1,mouseWheel:{preventDefault:!0},advanced:{autoScrollOnFocus:!1}})},isGameUpdateNotification:function(t){return t===o.gameUpdate},parseEpochMilliseconds:c,sortNotificationsByEventDate:function(e,a){if(!e)return null;var t=Object.keys(e).map(function(t){return e[t]});return t.sort(function(t,e){var i=c(t.eventDate)||0,n=c(e.eventDate)||0;return a?i-n:n-i}),t}}}o.$inject=["signalR","layoutLibraryService","$log"],a.a.factory("notificationStreamUtility",o),e.default=o},function(t,e,i){var n={"./directives/templates/developerMetricsAvailable.html":37,"./directives/templates/friendRequest.html":38,"./directives/templates/gameUpdateActionPopoverTemplate.html":39,"./directives/templates/gameUpdateTemplate.html":40,"./directives/templates/notificationContent.html":41,"./directives/templates/notificationContentViewTemplate.html":42,"./directives/templates/notificationStreamBase.html":43,"./directives/templates/notificationStreamBaseView.html":44,"./directives/templates/notificationStreamContainer.html":45,"./directives/templates/privateMessage.html":46,"./directives/templates/test.html":47};function a(t){var e=o(t);return i(e)}function o(t){if(i.o(n,t))return n[t];var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}a.keys=function(){return Object.keys(n)},a.resolve=o,(t.exports=a).id=36},function(t,e){t.exports='<div class="developer-metrics-notification-container"> <div class="notification-image-container"> <div class="card-plain" title="{{developerMetricsAvailableLayout.gameName}}"> <a class="text-name font-caption-header" ng-href="{{developerMetricsAvailableLayout.gameLinkUrl}}"> <img ng-src="{{developerMetricsAvailableLayout.gameIconUrl}}" class="game-icon placeholder-asset-icon"/> </a> </div> </div> <div class="notification-item-content"> <div class="notification-data-container"> <span class="small text notification-display-text"> <div class="small text message-header" ng-bind-html="\'Message.DeveloperMetricsAvailable\' | translate:developerMetricsAvailableLayout"> </div> </span> <div class="text-secondary text-date-hint"> {{notification.eventDate | datetime: \'full\'}} </div> </div> <div class="notification-action-container"> <button class="view-button btn-primary-xs see-all-link" ng-click="viewButtonHandler()" ng-bind="\'Action.View\' | translate"></button> </div> </div> </div>'},function(t,e){t.exports='<div> <div class="notification-item-front"> <div class="notification-image-container"> <div class="avatar avatar-headshot-sm card-plain" ng-if="userIds.length >= 1" title="{{library.userLibrary[userIds[0]].name}}"> <a ng-href="{{library.userLibrary[userIds[0]].profileLink}}" type="goToProfilePage" user_id="{{userIds[0]}}" click-in-card> <thumbnail-2d class="avatar-card-image" thumbnail-target-id="userIds[0]" thumbnail-type="thumbnailTypes.avatarHeadshot"> </thumbnail-2d> </a> </div> <span class="icon-nav-group notification-image-placeholder" ng-if="!userIds || userIds.length == 0"></span> </div> <div class="notification-item-content"> <div class="notification-data-container font-caption-body"> <span class="small text notification-display-text" click-in-card ng-hide="notification.metadataCollection[0].IsAccepted" ng-bind-html="notificationDisplayText"></span> <span class="small text notification-display-text" click-in-card ng-show="notification.metadataCollection[0].IsAccepted" ng-bind-html="requestConfirmedText"></span> <div class="text-secondary font-caption-body" ng-bind="notification.eventDate | datetime: \'full\'"></div> </div> <div class="notification-action-container"> <button class="btn-secondary-xs see-all-link font-caption-header" id="accept-fr-btn" ng-show="notification.friendRequestActionType === friendRequestActionType.acceptIgnoreBtns" ng-click="acceptFriend({targetUserId: userIds[0], notificationId: notification.id, event: $event})" ng-bind="\'Action.Accept\' | translate"></button> <button class="btn-control-xs see-all-link font-caption-header" id="ignore-fr-btn" ng-show="notification.friendRequestActionType === friendRequestActionType.acceptIgnoreBtns" ng-click="ignoreFriend({targetUserId: userIds[0], notificationId: notification.id, event: $event})" ng-bind="\'Action.Ignore\' | translate"></button> <button class="btn-secondary-xs roblox-popover-close see-all-link font-caption-header" id="chat-btn" ng-class="{\'btn-full-width\': library.isPhone}" ng-show="notification.friendRequestActionType === friendRequestActionType.chatBtn && !library.isChatDisabledByPrivacySetting" ng-click="chat({friendId: userIds[0], notificationId: notification.id, event: $event})" ng-bind="\'Action.Chat\' | translate"></button> <a class="btn-secondary-xs see-all-link font-caption-header" id="view-all-btn" ng-class="{\'btn-full-width\': library.isPhone }" ng-show="notification.friendRequestActionType === friendRequestActionType.viewAllBtn" click-in-card type="viewAllFriendRequests" ng-href="{{friendRequestLink}}" ng-bind="\'Action.ViewAll\' | translate"></a> </div> </div> </div> <div class="notification-item-back"> <div class="notification-image-container"> <div class="avatar avatar-headshot-sm card-plain" ng-if="userIds.length >= 1" title="{{library.userLibrary[userIds[0]].name}}"> <span ng-href="{{library.userLibrary[userIds[0]].profileLink}}" type="goToProfilePage" user_id="{{userIds[0]}}" click-in-card> <img ng-src="{{library.userLibrary[userIds[0]].thumbnail.Url}}" ng-href="{{library.userLibrary[userIds[0]].profileLink}}" type="goToProfilePage" user_id="{{userIds[0]}}" class="avatar-card-image" ng-class="{\'placeholder-avatar-headshot\':!library.userLibrary[userIds[0]].thumbnail.Url}"> </span> </div> <span class="icon-nav-group notification-image-placeholder" ng-if="!userIds || userIds.length == 0"></span> </div> <div class="notification-item-content"> <div class="notification-data-container font-caption-body"> <span class="text notification-display-text" click-in-card ng-show="notification.metadataCollection[0].IsAccepted" ng-bind-html="requestConfirmedText"></span> <div class="text-secondary font-caption-body" ng-bind="notification.eventDate | datetime: \'full\'"></div> </div> <div class="notification-action-container" ng-show="notification.notificationSourceType == notificationSourceType.friendRequestReceived"> <button class="btn-secondary-xs see-all-link font-caption-header" id="chat-btn" ng-class="{\'btn-full-width\': library.isPhone}" ng-show="notification.friendRequestActionType == friendRequestActionType.chatBtn && !library.isChatDisabledByPrivacySetting" ng-click="chat({friendId: userIds[0], notificationId: notification.id, event: $event})"> <span ng-bind="\'Action.Chat\' | translate"></span> </button> </div> </div> </div> </div>'},function(t,e){t.exports='<div> <ul class="dropdown-menu" role="menu"> <li> <a class="unfollow-link" ng-click="unfollowGame($event)"><span class="action-icon icon-follow-game-gray"></span><span ng-bind="\'Action.UnfollowGame\' | translate:{gameName: gameUpdateModel.truncatedGameName}"></span></a> </li> <li> <a class="report-abuse-link" ng-click="reportAbuse()"><span class="action-icon icon-report-darkgray"></span><span ng-bind="\'Action.ReportAbuse\' | translate"></span></a> </li> <li class="li-cancel-link"> <a class="cancel-link" ng-click="closeActionMenu()"><span class="action-icon icon-close"></span><span ng-bind="\'Action.Cancel\' | translate"></span></a> </li> </ul> </div>'},function(t,e){t.exports='<div class="game-update-notification-container" ng-class="{ \'active\':isActionMenuOpen }"> <div class="notification-image-container" ng-show="isAggregated || !gameUpdateModel.isUnfollowed"> <div class="card-plain" title="{{gameUpdateModel.gameName}}"> <a ng-click="goToGameDetails()"> <img ng-src="{{gameUpdateModel.gameIconUrl}}" class="game-icon placeholder-asset-icon"/> </a> </div> </div> <div class="notification-item-content" ng-show="!isAggregated && !gameUpdateModel.isUnfollowed"> <a class="more-link" uib-popover-template="actionMenuTemplate" popover-trigger="\'outsideClick\'" popover-placement="bottom-right" popover-is-open="isActionMenuOpen" popover-append-to-body="true" popover-class="game-update-action-menu" popover-animation="false"> <span class="icon-more-gray-vertical"></span> </a> <div class="notification-data-container" ng-class="{ \'single-game-update\': !isAggregated, \'play-button-visible\':library.canLaunchGameFromGameUpdate }"> <span class="small text notification-display-text"> <a class="text-name font-caption-header" ng-click="goToGameDetails()"> {{gameUpdateModel.truncatedGameName}} </a> : {{gameUpdateModel.updateMessage}} </span> <span class="spinner spinner-sm" ng-if="!gameUpdateModel.updateMessage"></span> <div class="text-secondary text-date-hint"> {{gameUpdateModel.createdOn | datetime: \'full\'}} </div> <div class="font-caption-body not-playable-message" ng-if="library.canLaunchGameFromGameUpdate && gameUpdateModel.isPlayable === false"> <span ng-bind="\'Message.GameNotPlayableOnDevice\' | translate"></span> </div> <div class="notification-action-container" ng-if="library.canLaunchGameFromGameUpdate && gameUpdateModel.isPlayable"> <button class="play-button btn-growth-xs see-all-link font-caption-header" ng-click="playButtonHandler()" ng-bind="\'Action.Play\' | translate"></button> </div> </div> </div> <div class="notification-item-content aggregated" ng-show="isAggregated" ng-click="viewGameUpdates()"> <div class="notification-data-container"> <span class="small text notification-display-text" ng-bind-html="aggregatedDisplayText"></span> <div class="text-secondary text-date-hint"> {{gameUpdateModel.createdOn | datetime: \'full\'}} </div> <span class="icon-right"></span> </div> </div> <div ng-show="!isAggregated && gameUpdateModel.isUnfollowed"> <div class="unfollowed-game-update-notification small text" ng-class="{ \'play-button-visible\':library.canLaunchGameFromGameUpdate }"> <span ng-bind="\'Message.UnfollowedGame\' | translate:{gameName: gameUpdateModel.truncatedGameName}"></span><a class="undo-unfollow-link text-link small" ng-click="followGame()" ng-bind="\'Action.Undo\' | translate"></a> </div> </div> </div> '},function(t,e){t.exports=' <div class="notification-stream-content" id="notification-stream-content" ng-cloak> <div ng-controller="notificationsController" id="notification-stream-container" class="roblox-popover-container notification-stream-wrap" ng-class="{\'open\': layout.isNotificationContentOpen}"> <div class="arrow"></div> <div class="popover-container notification-stream-container"> <div notification-content-view library="library" content-view-manager="contentViewManager" view-id="{{library.notificationContentViews.main}}" is-active="true"> <div class="notification-stream-header" ng-hide="library.isPhone || library.iniOSApp"> <span class="text-label font-caption-header" ng-bind="\'Label.Notifications\' | translate"></span> <a class="text-link font-caption-header" click-in-card type="goToSettingPage" ng-href="{{layout.settingLink}}" ng-bind="\'Label.Settings\' | translate"></a> </div> <div id="notification-stream-body" class="notification-stream-body" notification-stream-body ng-class="{\'notification-stream-body-height\' : layout.getRecentDataInitialized && notificationIds.length == 0 }"> <div class="small notification-stream-banner banner-new" ng-class="{\'on\': layout.isNotificationContentOpen && layout.bannerEnabled}"> <span class="banner-text" ng-click="reloadNotificationStreamData()">{{layout.bannerText}}</span> <span id="close" class="icon-close-white" ng-click="layout.bannerEnabled = false"></span> </div> <div class="small notification-stream-banner banner-error" ng-class="{\'on\': layout.isNotificationContentOpen && layout.errorBannerEnabled}"> <span class="banner-text">{{layout.errorText}}</span> <span id="close" class="icon-close-white" ng-click="layout.errorBannerEnabled = false"></span> </div> <div ng-show="layout.getRecentDataInitialized && notificationIds.length > 0" class="notification-stream-data"> <div id="notification-stream-scrollbar" class="rbx-scrollbar notification-stream-scrollbar" lazy-loading> <ul class="notification-stream-list"> <li ng-repeat="notification in notifications | sortNotificationsByEventDateDesc" notification-card class="border-bottom notification-stream-item" id="notification-stream-{{notification.id}}" ng-class="{\'unInteracted\': !notification.isInteracted,\'slide-out-left\': notification.isSlideOut,\'turn-off\': notification.isTurnOff,\'clickable\': notification.isClickable,\'game-update\': notification.notificationSourceType == notificationSourceType.gameUpdate }"> <div ng-if="notification.notificationSourceType == notificationSourceType.friendRequestReceived" friend-request notification="notification" library="library" app-meta="appMeta" accept-friend="acceptFriend(targetUserId, notificationId, event)" ignore-friend="ignoreFriend(targetUserId, notificationId, event)" chat="chat(friendId, notificationId, event)" interact-notification="interactNotification(notification)" class="notification-item" ng-hide="notification.isTurnOff" ng-class="{\'flipped\': notification.isFlipped}"> </div> <div ng-if="notification.notificationSourceType == notificationSourceType.friendRequestAccepted" friend-request notification="notification" library="library" app-meta="appMeta" chat="chat(friendId, notificationId, event)" interact-notification="interactNotification(notification)" ng-hide="notification.isTurnOff" class="notification-item" ng-click="notification.isClickable ?  clickCard(notification) : null"> </div> <div ng-if="notification.notificationSourceType == notificationSourceType.test" test notification="notification" interact-notification="interactNotification(notification)" class="notification-item"> </div> <div ng-if="notification.notificationSourceType == notificationSourceType.privateMessageReceived" private-message notification="notification" interact-notification="interactNotification(notification)" app-meta="appMeta" library="library" class="notification-item notification-stream-pm" ng-click="notification.isClickable ?  clickCard(notification) : null"> </div> <div ng-if="notification.notificationSourceType == notificationSourceType.developerMetricsAvailable" developer-metrics-available notification="notification" interact-notification="interactNotification(notification)" app-meta="appMeta" library="library" class="notification-item notification-stream-pm" ng-click="notification.isClickable ?  clickCard(notification) : null"> </div> <div ng-if="notification.notificationSourceType == notificationSourceType.gameUpdate" game-update notification="notification" library="library" content-view-manager="contentViewManager" app-meta="appMeta" class="notification-item" ng-hide="notification.isTurnOff" ng-click="null"> </div> <div class="small turn-off-container" ng-hide="!notification.isTurnOff"> <span class="turn-off-text">You have turned off notifications for</span> <a class="text-link small" ng-click="updateNotificationSetting(true)">Undo</a> </div> <span class="hidden icon-turn-off" ng-click="updateNotificationSetting(false)"></span> </li> </ul> <div class="notifications-lazy-loading" ng-show="layout.notiticationsLazyLoadingEnabled"> <span class="loading"></span> </div> </div> </div> <div class="notification-stream-loading" ng-hide="layout.getRecentDataInitialized"> <span class="loading"></span> </div> <div class="container-empty" ng-show="layout.getRecentDataInitialized && notificationIds.length === 0 "> <div class="notification-stream-empty"></div> <div><span class="text" ng-bind="\'Label.NoNotifications\' | translate"></span></div> </div> </div> </div> <div notification-content-view class="game-updates" library="library" content-view-manager="contentViewManager" view-id="{{library.notificationContentViews.gameUpdates}}" is-active="false"> <div class="notification-stream-header"> <a class="back-icon icon-left" ng-click="contentViewManager.selectContentView(library.notificationContentViews.main)"></a> <span class="text-label small text game-updates-header" ng-click="contentViewManager.selectContentView(library.notificationContentViews.main)" ng-bind="\'Heading.BackToAllNotifications\' | translate"> </span> </div> <div id="notification-stream-body" class="notification-stream-body game-updates"> <div class="notification-stream-data"> <div id="notification-stream-scrollbar" class="rbx-scrollbar notification-stream-scrollbar"> <ul class="notification-stream-list"> <li ng-repeat="gameUpdateModel in library.gameUpdateModels | sortGameUpdates" class="border-bottom notification-stream-item unInteracted game-update"> <div game-update game-update-model="gameUpdateModel" library="library" app-meta="appMeta" class="notification-item" ng-click="null"> </div> </li> </ul> </div> </div> </div> </div> </div> </div> </div>'},function(t,e){t.exports='<div class="notification-content-view" ng-show="isActive" ng-transclude></div>'},function(t,e){t.exports='<div ng-controller="notificationStreamController" class="roblox-popover-content manual bottom" data-hidden-class-name="invisible" id="notification-stream-base" data-isNotificationContentOpen="{{layout.isNotificationContentOpen}}" ng-class="{\'inApp\': library.inApp,\'isPhone\': library.isPhone,\'invisible\': !library.inApp && !layout.isNotificationContentOpen}"> <div notification-content></div> </div>'},function(t,e){t.exports='<div ng-controller="notificationStreamBaseController" id="notification-stream-base-view" ng-class="{\'inApp\': library.inApp,\'isPhone\': library.isPhone}"> <div notification-stream-container></div> </div>'},function(t,e){t.exports='<div class="notification-stream-content" id="notification-stream-container" ng-cloak> <div ng-controller="notificationsController" class="notification-stream-wrap open"> <div class="notification-stream-container"> <div notification-content-view library="library" content-view-manager="contentViewManager" view-id="{{library.notificationContentViews.main}}" is-active="true"> <div class="notification-stream-header" ng-hide="library.isPhone || library.iniOSApp"> <span class="text-label font-caption-header" ng-bind="\'Label.Notifications\' | translate"></span> <a class="text-link font-caption-header" click-in-card type="goToSettingPage" ng-href="{{layout.settingLink}}" ng-bind="\'Label.Settings\' | translate"></a> </div> <div id="notification-stream-body" class="notification-stream-body" notification-stream-body ng-class="{\'notification-stream-body-height\' : layout.getRecentDataInitialized && notificationIds.length == 0 }"> <div class="small notification-stream-banner banner-new" ng-class="{\'on\': layout.isNotificationContentOpen && layout.bannerEnabled}"> <span class="banner-text" ng-click="reloadNotificationStreamData()">{{layout.bannerText}}</span> <span id="close" class="icon-close-white" ng-click="layout.bannerEnabled = false"></span> </div> <div class="small notification-stream-banner banner-error" ng-class="{\'on\': layout.isNotificationContentOpen && layout.errorBannerEnabled}"> <span class="banner-text">{{layout.errorText}}</span> <span id="close" class="icon-close-white" ng-click="layout.errorBannerEnabled = false"></span> </div> <div ng-show="layout.getRecentDataInitialized && notificationIds.length > 0" class="notification-stream-data"> <div id="notification-stream-scrollbar" class="rbx-scrollbar notification-stream-scrollbar" lazy-loading> <ul class="notification-stream-list"> <li ng-repeat="notification in notifications | sortNotificationsByEventDateDesc" notification-card class="border-bottom notification-stream-item" id="notification-stream-{{notification.id}}" ng-class="{\'unInteracted\': !notification.isInteracted,\'slide-out-left\': notification.isSlideOut,\'turn-off\': notification.isTurnOff,\'clickable\': notification.isClickable,\'game-update\': notification.notificationSourceType == notificationSourceType.gameUpdate }"> <div ng-if="notification.notificationSourceType == notificationSourceType.friendRequestReceived" friend-request notification="notification" library="library" app-meta="appMeta" accept-friend="acceptFriend(targetUserId, notificationId, event)" ignore-friend="ignoreFriend(targetUserId, notificationId, event)" chat="chat(friendId, notificationId, event)" interact-notification="interactNotification(notification)" class="notification-item" ng-hide="notification.isTurnOff" ng-class="{\'flipped\': notification.isFlipped}"></div> <div ng-if="notification.notificationSourceType == notificationSourceType.friendRequestAccepted" friend-request notification="notification" library="library" app-meta="appMeta" chat="chat(friendId, notificationId, event)" interact-notification="interactNotification(notification)" ng-hide="notification.isTurnOff" class="notification-item" ng-click="notification.isClickable ?  clickCard(notification) : null"></div> <div ng-if="notification.notificationSourceType == notificationSourceType.test" test notification="notification" interact-notification="interactNotification(notification)" class="notification-item"></div> <div ng-if="notification.notificationSourceType == notificationSourceType.privateMessageReceived" private-message notification="notification" interact-notification="interactNotification(notification)" app-meta="appMeta" library="library" class="notification-item notification-stream-pm" ng-click="notification.isClickable ?  clickCard(notification) : null"></div> <div ng-if="notification.notificationSourceType == notificationSourceType.developerMetricsAvailable" developer-metrics-available notification="notification" interact-notification="interactNotification(notification)" app-meta="appMeta" library="library" class="notification-item notification-stream-pm" ng-click="notification.isClickable ?  clickCard(notification) : null"></div> <div ng-if="notification.notificationSourceType == notificationSourceType.gameUpdate" game-update notification="notification" library="library" content-view-manager="contentViewManager" app-meta="appMeta" class="notification-item" ng-hide="notification.isTurnOff" ng-click="null"></div> <div class="small turn-off-container" ng-hide="!notification.isTurnOff"> <span class="turn-off-text">You have turned off notifications for</span> <a class="text-link small" ng-click="updateNotificationSetting(true)">Undo</a> </div> <span class="hidden icon-turn-off" ng-click="updateNotificationSetting(false)"></span> </li> </ul> <div class="notifications-lazy-loading" ng-show="layout.notiticationsLazyLoadingEnabled"> <span class="spinner spinner-sm"></span> </div> </div> </div> <div class="notification-stream-loading" ng-hide="layout.getRecentDataInitialized"> <span class="spinner spinner-sm"></span> </div> <div class="container-empty" ng-show="layout.getRecentDataInitialized && notificationIds.length === 0 "> <div class="notification-stream-empty"></div> <div><span class="text" ng-bind="\'Label.NoNotifications\' | translate"></span></div> </div> </div> </div> <div notification-content-view class="game-updates" library="library" content-view-manager="contentViewManager" view-id="{{library.notificationContentViews.gameUpdates}}" is-active="false"> <div class="notification-stream-header"> <a class="back-icon icon-left" ng-click="contentViewManager.selectContentView(library.notificationContentViews.main)"></a> <span class="text-label small text game-updates-header" ng-click="contentViewManager.selectContentView(library.notificationContentViews.main)" ng-bind="\'Heading.BackToAllNotifications\' | translate"> </span> </div> <div id="notification-stream-body" class="notification-stream-body game-updates"> <div class="notification-stream-data"> <div id="notification-stream-scrollbar" class="rbx-scrollbar notification-stream-scrollbar"> <ul class="notification-stream-list"> <li ng-repeat="gameUpdateModel in library.gameUpdateModels | sortGameUpdates" class="border-bottom notification-stream-item unInteracted game-update"> <div game-update game-update-model="gameUpdateModel" library="library" app-meta="appMeta" class="notification-item" ng-click="null"></div> </li> </ul> </div> </div> </div> </div> </div> </div> </div> '},function(t,e){t.exports='<div> <div class="notification-image-container"> <div class="avatar avatar-headshot-sm card-plain" ng-if="privateMessageLayout.displayUserId !== null" title="{{privateMessageLayout.displayUserName}}"> <a ng-href="{{library.userLibrary[privateMessageLayout.displayUserId].profileLink}}" type="goToProfilePage" user_id="{{privateMessageLayout.displayUserId}}" click-in-card> <thumbnail-2d class="avatar-card-image" thumbnail-target-id="privateMessageLayout.displayUserId" thumbnail-type="thumbnailTypes.avatarHeadshot"> </thumbnail-2d> </a> </div> <span class="icon-nav-group" ng-if="privateMessageLayout.displayUserId === null"></span> </div> <div class="notification-item-content"> <div class="notification-data-container"> <span class="font-caption-body text notification-display-text" ng-show="!privateMessageLayout.isStacked"> <div class="font-caption-body text message-header" ng-bind-html="\'Message.MessageFrom\' | translate:{username: \'<span class=font-caption-header>\' + privateMessageLayout.displayUserName + \'</span>\'}"></div> <div class="text-secondary message-preview" ng-bind="privateMessageLayout.messagePreview"></div> </span> <div class="font-caption-body text notification-display-text" ng-show="privateMessageLayout.isStacked" ng-bind-html="\'Message.YouReceivedMessages\' | translate:{numberOfMessagesText: \'<span class=font-caption-header>\' + notification.eventCount + \'</span>\', numberOfMessages: notification.eventCount}"></div> <div class="text-date-hint" ng-bind="notification.eventDate | datetime: \'full\'"></div> </div> </div> </div> '},function(t,e){t.exports='<div> <div class="notification-item-test"> <div class="notification-item-content"> <div class="notification-data-container"> <span class="text notification-display-text">{{notificationDisplayText}}</span> <div class="text-date-hint">{{notification.eventDate | datetime: \'full\'}}</div> </div> </div> </div> </div>'},function(t,e,i){"use strict";i.r(e);var n=i(2),a=i.n(n),o=i(3),r=(i(49),i(4)),c=i(1);Object(o.importFilesUnderPath)(i(50)),Object(o.importFilesUnderPath)(i(54));var s=i(56);Object(o.templateCacheGenerator)(a.a,"notificationStreamIconHtmlTemplate",s);a.a.element(function(){a.a.bootstrap("#notification-stream-icon-container",[r.a.name])}),Object(o.importFilesUnderPath)(i(5)),Object(o.importFilesUnderPath)(i(8)),Object(o.importFilesUnderPath)(i(11)),Object(o.importFilesUnderPath)(i(26)),Object(o.importFilesUnderPath)(i(30));var l=i(36);Object(o.templateCacheGenerator)(a.a,"notificationStreamHtmlTemplate",l);a.a.element(function(){a.a.bootstrap(".notification-stream-base",[c.a.name])}),e.default={notificationStreamIconModule:r.a,notificationStreamModule:c.a}},function(t,e,i){},function(t,e,i){var n={"./notificationIndicatorDirective.js":51,"./notificationStreamIconDirective.js":52,"./notificationStreamIndicatorDirective.js":53};function a(t){var e=o(t);return i(e)}function o(t){if(i.o(n,t))return n[t];var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}a.keys=function(){return Object.keys(n)},a.resolve=o,(t.exports=a).id=50},function(t,e,i){"use strict";i.r(e);var n=i(4);function a(t,n,a){return{restrict:"A",replace:!0,scope:!0,templateUrl:t.templates.notificationIndicatorTemplate,link:function(i,t,e){n.bind("Roblox.NotificationStream.UnreadNotifications",function(t,e){a.debug(" ----- notificationStreamIconController --- args.count --------"+e.count),i.$evalAsync(function(t){i.layout=i.layout||{},i.layout.unreadNotifications=t.count,i.layout.isNotificationContentOpen=t.isNotificationContentOpen}(e))})}}}a.$inject=["notificationStreamUtility","$document","$log"],n.a.directive("notificationIndicator",a),e.default=a},function(t,e,i){"use strict";i.r(e);var n=i(4);function a(t,e){return{restrict:"A",replace:!0,scope:!0,templateUrl:t.templates.notificationStreamIconTemplate}}a.$inject=["notificationStreamUtility","$log"],n.a.directive("notificationStreamIcon",a),e.default=a},function(t,e,i){"use strict";i.r(e);var n=i(4);function a(t,a,o,r){return{restrict:"A",replace:!0,scope:!0,templateUrl:t.templates.notificationStreamIndicatorTemplate,link:function(i,t,e){function n(t){i.layout.unreadNotifications=t.count,i.layout.isNotificationContentOpen=t.isNotificationContentOpen}i.layout=i.layout||{},i.getUnreadNotificationCount=function(){r.unreadCount().then(function(t){if(t){var e=t.unreadNotifications;i.layout.unreadNotifications=e}},function(){o.debug("--- unreadCount call failed from notificationStreamIndicatorDirective----- ")})},a.bind("Roblox.NotificationStream.UnreadNotifications",function(t,e){o.debug(" ----- notificationStreamIconController --- args.count --------".concat(e.count)),i.$evalAsync(n(e))}),a.bind("Roblox.NotificationStream.ClearUnreadNotifications",function(){0<i.layout.unreadNotifications&&(n({count:0,isNotificationContentOpen:!0}),r.clearUnread().then(function(){i.layout.unreadNotifications=0}))}),i.layout&&i.layout.isNotificationContentOpen||i.getUnreadNotificationCount()}}}a.$inject=["notificationStreamUtility","$document","$log","notificationStreamService"],n.a.directive("notificationStreamIndicator",a),e.default=a},function(t,e,i){var n={"./abbreviateCountFilter.js":55};function a(t){var e=o(t);return i(e)}function o(t){if(i.o(n,t))return n[t];var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}a.keys=function(){return Object.keys(n)},a.resolve=o,(t.exports=a).id=54},function(t,e,i){"use strict";function n(){var n={100:"99+",1e3:"1K+"};return function(t,e,i){return e=e||100,i=i||n[e],e<=t?i:t}}i.r(e),i(4).a.filter("abbreivateCount",n),e.default=n},function(t,e,i){var n={"./directives/templates/notificationIndicator.html":57,"./directives/templates/notificationStreamIcon.html":58,"./directives/templates/notificationStreamIndicator.html":59};function a(t){var e=o(t);return i(e)}function o(t){if(i.o(n,t))return n[t];var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}a.keys=function(){return Object.keys(n)},a.resolve=o,(t.exports=a).id=56},function(t,e){t.exports='<a id="nav-ns-icon" class="roblox-popover rbx-menu-item notification-stream-icon" data-bind="notification-stream-base" data-container="notification-stream-container"> <span class="icon-nav-notification-stream" id="nav-notifications"></span> <span class="notification-red notification" ng-show="layout.unreadNotifications > 0 && (!layout.isNotificationContentOpen)"> {{layout.unreadNotifications | abbreivateCount}} </span> </a>'},function(t,e){t.exports='<div class="notification-stream" ng-class="{\'inApp\': library.inApp}"> <div notification-indicator></div> </div>'},function(t,e){t.exports='<div class="notification-stream-indicator" ng-class="{\'inApp\': library.inApp}"> <a id="nav-ns-icon" class="rbx-menu-item notification-stream-icon"> <span class="icon-nav-notification-stream" id="nav-notifications"></span> <span class="notification-red notification" ng-show="layout.unreadNotifications > 0 && (!layout.isNotificationContentOpen)"> {{layout.unreadNotifications | abbreivateCount}} </span> </a> </div>'}]);
//# sourceMappingURL=https://js.rbxcdn.com/80284f81b8e85173ec65-notificationStream.js.map

/* Bundle detector */
window.Roblox && window.Roblox.BundleDetector && window.Roblox.BundleDetector.bundleDetected("NotificationStream");